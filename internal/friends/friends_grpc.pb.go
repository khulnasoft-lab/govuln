// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package friends

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NotGoingAnywhereClient is the client API for NotGoingAnywhere service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotGoingAnywhereClient interface {
	RegisterPerson(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Person, error)
	GetPerson(ctx context.Context, in *PersonRequest, opts ...grpc.CallOption) (*People, error)
	GetPeople(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*People, error)
	GetFriends(ctx context.Context, in *Person, opts ...grpc.CallOption) (*People, error)
	GetPosts(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Posts, error)
	GetAllPosts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Posts, error)
	AddPost(ctx context.Context, in *NewPost, opts ...grpc.CallOption) (*TrueForSuccess, error)
	AddFriend(ctx context.Context, in *Friendship, opts ...grpc.CallOption) (*TrueForSuccess, error)
	Unfriend(ctx context.Context, in *Friendship, opts ...grpc.CallOption) (*TrueForSuccess, error)
}

type notGoingAnywhereClient struct {
	cc grpc.ClientConnInterface
}

func NewNotGoingAnywhereClient(cc grpc.ClientConnInterface) NotGoingAnywhereClient {
	return &notGoingAnywhereClient{cc}
}

func (c *notGoingAnywhereClient) RegisterPerson(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/friends.NotGoingAnywhere/RegisterPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notGoingAnywhereClient) GetPerson(ctx context.Context, in *PersonRequest, opts ...grpc.CallOption) (*People, error) {
	out := new(People)
	err := c.cc.Invoke(ctx, "/friends.NotGoingAnywhere/GetPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notGoingAnywhereClient) GetPeople(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*People, error) {
	out := new(People)
	err := c.cc.Invoke(ctx, "/friends.NotGoingAnywhere/GetPeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notGoingAnywhereClient) GetFriends(ctx context.Context, in *Person, opts ...grpc.CallOption) (*People, error) {
	out := new(People)
	err := c.cc.Invoke(ctx, "/friends.NotGoingAnywhere/GetFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notGoingAnywhereClient) GetPosts(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Posts, error) {
	out := new(Posts)
	err := c.cc.Invoke(ctx, "/friends.NotGoingAnywhere/GetPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notGoingAnywhereClient) GetAllPosts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Posts, error) {
	out := new(Posts)
	err := c.cc.Invoke(ctx, "/friends.NotGoingAnywhere/GetAllPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notGoingAnywhereClient) AddPost(ctx context.Context, in *NewPost, opts ...grpc.CallOption) (*TrueForSuccess, error) {
	out := new(TrueForSuccess)
	err := c.cc.Invoke(ctx, "/friends.NotGoingAnywhere/AddPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notGoingAnywhereClient) AddFriend(ctx context.Context, in *Friendship, opts ...grpc.CallOption) (*TrueForSuccess, error) {
	out := new(TrueForSuccess)
	err := c.cc.Invoke(ctx, "/friends.NotGoingAnywhere/AddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notGoingAnywhereClient) Unfriend(ctx context.Context, in *Friendship, opts ...grpc.CallOption) (*TrueForSuccess, error) {
	out := new(TrueForSuccess)
	err := c.cc.Invoke(ctx, "/friends.NotGoingAnywhere/Unfriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotGoingAnywhereServer is the server API for NotGoingAnywhere service.
// All implementations must embed UnimplementedNotGoingAnywhereServer
// for forward compatibility
type NotGoingAnywhereServer interface {
	RegisterPerson(context.Context, *RegisterRequest) (*Person, error)
	GetPerson(context.Context, *PersonRequest) (*People, error)
	GetPeople(context.Context, *Empty) (*People, error)
	GetFriends(context.Context, *Person) (*People, error)
	GetPosts(context.Context, *Person) (*Posts, error)
	GetAllPosts(context.Context, *Empty) (*Posts, error)
	AddPost(context.Context, *NewPost) (*TrueForSuccess, error)
	AddFriend(context.Context, *Friendship) (*TrueForSuccess, error)
	Unfriend(context.Context, *Friendship) (*TrueForSuccess, error)
	mustEmbedUnimplementedNotGoingAnywhereServer()
}

// UnimplementedNotGoingAnywhereServer must be embedded to have forward compatible implementations.
type UnimplementedNotGoingAnywhereServer struct {
}

func (*UnimplementedNotGoingAnywhereServer) RegisterPerson(context.Context, *RegisterRequest) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPerson not implemented")
}
func (*UnimplementedNotGoingAnywhereServer) GetPerson(context.Context, *PersonRequest) (*People, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (*UnimplementedNotGoingAnywhereServer) GetPeople(context.Context, *Empty) (*People, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeople not implemented")
}
func (*UnimplementedNotGoingAnywhereServer) GetFriends(context.Context, *Person) (*People, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}
func (*UnimplementedNotGoingAnywhereServer) GetPosts(context.Context, *Person) (*Posts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (*UnimplementedNotGoingAnywhereServer) GetAllPosts(context.Context, *Empty) (*Posts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPosts not implemented")
}
func (*UnimplementedNotGoingAnywhereServer) AddPost(context.Context, *NewPost) (*TrueForSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPost not implemented")
}
func (*UnimplementedNotGoingAnywhereServer) AddFriend(context.Context, *Friendship) (*TrueForSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (*UnimplementedNotGoingAnywhereServer) Unfriend(context.Context, *Friendship) (*TrueForSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfriend not implemented")
}
func (*UnimplementedNotGoingAnywhereServer) mustEmbedUnimplementedNotGoingAnywhereServer() {}

func RegisterNotGoingAnywhereServer(s *grpc.Server, srv NotGoingAnywhereServer) {
	s.RegisterService(&_NotGoingAnywhere_serviceDesc, srv)
}

func _NotGoingAnywhere_RegisterPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotGoingAnywhereServer).RegisterPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friends.NotGoingAnywhere/RegisterPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotGoingAnywhereServer).RegisterPerson(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotGoingAnywhere_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotGoingAnywhereServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friends.NotGoingAnywhere/GetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotGoingAnywhereServer).GetPerson(ctx, req.(*PersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotGoingAnywhere_GetPeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotGoingAnywhereServer).GetPeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friends.NotGoingAnywhere/GetPeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotGoingAnywhereServer).GetPeople(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotGoingAnywhere_GetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotGoingAnywhereServer).GetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friends.NotGoingAnywhere/GetFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotGoingAnywhereServer).GetFriends(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotGoingAnywhere_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotGoingAnywhereServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friends.NotGoingAnywhere/GetPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotGoingAnywhereServer).GetPosts(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotGoingAnywhere_GetAllPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotGoingAnywhereServer).GetAllPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friends.NotGoingAnywhere/GetAllPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotGoingAnywhereServer).GetAllPosts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotGoingAnywhere_AddPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotGoingAnywhereServer).AddPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friends.NotGoingAnywhere/AddPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotGoingAnywhereServer).AddPost(ctx, req.(*NewPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotGoingAnywhere_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Friendship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotGoingAnywhereServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friends.NotGoingAnywhere/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotGoingAnywhereServer).AddFriend(ctx, req.(*Friendship))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotGoingAnywhere_Unfriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Friendship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotGoingAnywhereServer).Unfriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friends.NotGoingAnywhere/Unfriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotGoingAnywhereServer).Unfriend(ctx, req.(*Friendship))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotGoingAnywhere_serviceDesc = grpc.ServiceDesc{
	ServiceName: "friends.NotGoingAnywhere",
	HandlerType: (*NotGoingAnywhereServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPerson",
			Handler:    _NotGoingAnywhere_RegisterPerson_Handler,
		},
		{
			MethodName: "GetPerson",
			Handler:    _NotGoingAnywhere_GetPerson_Handler,
		},
		{
			MethodName: "GetPeople",
			Handler:    _NotGoingAnywhere_GetPeople_Handler,
		},
		{
			MethodName: "GetFriends",
			Handler:    _NotGoingAnywhere_GetFriends_Handler,
		},
		{
			MethodName: "GetPosts",
			Handler:    _NotGoingAnywhere_GetPosts_Handler,
		},
		{
			MethodName: "GetAllPosts",
			Handler:    _NotGoingAnywhere_GetAllPosts_Handler,
		},
		{
			MethodName: "AddPost",
			Handler:    _NotGoingAnywhere_AddPost_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _NotGoingAnywhere_AddFriend_Handler,
		},
		{
			MethodName: "Unfriend",
			Handler:    _NotGoingAnywhere_Unfriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friends.proto",
}
