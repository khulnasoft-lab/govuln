// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PingNGAClient is the client API for PingNGA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingNGAClient interface {
	PingSensitive(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error)
}

type pingNGAClient struct {
	cc grpc.ClientConnInterface
}

func NewPingNGAClient(cc grpc.ClientConnInterface) PingNGAClient {
	return &pingNGAClient{cc}
}

func (c *pingNGAClient) PingSensitive(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ping.PingNGA/PingSensitive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PingNGAServer is the server API for PingNGA service.
// All implementations must embed UnimplementedPingNGAServer
// for forward compatibility
type PingNGAServer interface {
	PingSensitive(context.Context, *Message) (*Response, error)
	mustEmbedUnimplementedPingNGAServer()
}

// UnimplementedPingNGAServer must be embedded to have forward compatible implementations.
type UnimplementedPingNGAServer struct {
}

func (*UnimplementedPingNGAServer) PingSensitive(context.Context, *Message) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingSensitive not implemented")
}
func (*UnimplementedPingNGAServer) mustEmbedUnimplementedPingNGAServer() {}

func RegisterPingNGAServer(s *grpc.Server, srv PingNGAServer) {
	s.RegisterService(&_PingNGA_serviceDesc, srv)
}

func _PingNGA_PingSensitive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingNGAServer).PingSensitive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ping.PingNGA/PingSensitive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingNGAServer).PingSensitive(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _PingNGA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ping.PingNGA",
	HandlerType: (*PingNGAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingSensitive",
			Handler:    _PingNGA_PingSensitive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ping.proto",
}
